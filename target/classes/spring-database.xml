<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"
       default-lazy-init="true">

    <description>DataSource Configuration</description>
     <context:component-scan base-package="com.org.*"></context:component-scan>
    <context:property-placeholder location="classpath:db.properties" ignore-unresolvable="true" />
    <!-- AOP自动代理功能 -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>
    
<!-- 配置连接池 -->  
    <bean id="masterDataSource" class="com.alibaba.druid.pool.DruidDataSource"  
        destroy-method="close">  
        <!-- 数据库驱动 -->  
        <property name="driverClassName" value="${jdbc.master.driver}" />  
        <!-- 相应驱动的jdbcUrl -->  
        <property name="url" value="${jdbc.master.url}" />  
        <!-- 数据库的用户名 -->  
        <property name="username" value="${jdbc.master.username}" />  
        <!-- 数据库的密码 -->  
        <property name="password" value="${jdbc.master.password}" />  
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="2" />
        <!-- 连接池最大使用连接数量 -->
        <property name="maxActive" value="100" />
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="2" />
    </bean>  
      
    <!-- 配置连接池 -->  
    <bean id="slave01DataSource" class="com.alibaba.druid.pool.DruidDataSource"  
        destroy-method="close">  
        <!-- 数据库驱动 -->  
        <property name="driverClassName" value="${jdbc.slave01.driver}" />  
        <!-- 相应驱动的jdbcUrl -->  
        <property name="url" value="${jdbc.slave01.url}" />  
        <!-- 数据库的用户名 -->  
        <property name="username" value="${jdbc.slave01.username}" />  
        <!-- 数据库的密码 -->  
        <property name="password" value="${jdbc.slave01.password}" />  
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="2" />
        <!-- 连接池最大使用连接数量 -->
        <property name="maxActive" value="100" />
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="2" />
    </bean>  
    <!-- 定义数据源，使用自己实现的数据源 -->  
    <bean id="dataSource" class="com.org.datasource.DynamicDataSource">  
        <!-- 设置多个数据源 -->  
        <property name="targetDataSources">  
            <map key-type="java.lang.String">  
                <!-- 这个key需要和程序中的key一致 -->  
                <entry key="master" value-ref="masterDataSource"/>  
                <entry key="slave" value-ref="slave01DataSource"/>  
            </map>  
        </property>  
        <!-- 设置默认的数据源，这里默认走写库 -->  
        <property name="defaultTargetDataSource" ref="masterDataSource"/>  
    </bean>  
   
	<!-- mapper配置 -->
	<!-- 让spring管理sqlsessionfactory 使用mybatis和spring整合包中的 -->
	<!-- mybatis核心bean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 数据库连接池 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 加载mybatis的全局配置文件 -->
		<property name="configLocation" value="classpath:SqlMapConfig.xml" />
		<property name="mapperLocations" value="classpath:com/org/mapper/**/*Mapper.xml"/>
	</bean>
	
	<!-- 配置Mapper扫描器 -->
	<!-- 自动扫描DAO接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.org.dao"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	
	<!-- 定义事务管理器 -->  
	<bean id="transactionManager"  
	    class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
	    <property name="dataSource" ref="dataSource" />  
	</bean>  
	<!-- 定义事务策略 -->  
    <tx:advice id="txAdvice" transaction-manager="transactionManager">  
        <tx:attributes>  
            <!--定义查询方法都是只读的 -->  
            <tx:method name="query*" read-only="true" />  
            <tx:method name="find*" read-only="true" />  
            <tx:method name="get*" read-only="true" />  
  
            <!-- 主库执行操作，事务传播行为定义为默认行为 -->  
            <tx:method name="save*" propagation="REQUIRED" />  
            <tx:method name="insert*" propagation="REQUIRED" /> 
            <tx:method name="update*" propagation="REQUIRED" />  
            <tx:method name="delete*" propagation="REQUIRED" />  
  
            <!--其他方法使用默认事务策略 -->  
            <tx:method name="*" />  
        </tx:attributes>  
    </tx:advice>  
    
    <!-- 定义AOP切面处理器 -->  
    <bean class="com.org.datasource.DataSourceAspect" id="dataSourceAspect">  
        <!-- 指定事务策略 -->  
        <property name="txAdvice" ref="txAdvice"/>  
        <!-- 指定slave方法的前缀（非必须） -->  
        <property name="slaveMethodStart" value="query,find,get"/>  
    </bean>   
    <aop:config>  
        <!--pointcut元素定义一个切入点，execution中的第一个星号 用以匹配方法的返回类型， 这里星号表明匹配所有返回类型。 com.abc.dao.*.*(..)表明匹配cn.itcast.mybatis.service包下的所有类的所有   
            方法 -->  
        <aop:pointcut id="myPointcut"  
            expression="execution(* com.org.service.*.*(..))" />  
        <!--将定义好的事务处理策略应用到上述的切入点 -->  
        <aop:advisor advice-ref="txAdvice" pointcut-ref="myPointcut" />  
  
        <!-- 将切面应用到自定义的切面处理器上，-9999保证该切面优先级最高执行 -->  
        <aop:aspect ref="dataSourceAspect" order="-9999">  
            <aop:before method="before" pointcut-ref="myPointcut" />  
        </aop:aspect>  
    </aop:config>  
</beans>
